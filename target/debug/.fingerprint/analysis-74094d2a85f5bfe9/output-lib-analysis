{"$message_type":"diagnostic","message":"the name `Connection` is defined multiple times","code":{"code":"E0252","explanation":"Two items of the same name cannot be imported without rebinding one of the\nitems under a new local name.\n\nErroneous code example:\n\n```compile_fail,E0252\nuse foo::baz;\nuse bar::baz; // error, do `use bar::baz as quux` instead\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse foo::baz as foo_baz;\nuse bar::baz; // ok!\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nOr you can reference the item with its parent:\n\n```\nuse bar::baz;\n\nfn main() {\n    let x = foo::baz; // ok!\n}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n"},"level":"error","spans":[{"file_name":"analysis/src/data/sqlite.rs","byte_start":87,"byte_end":97,"line_start":3,"line_end":3,"column_start":24,"column_end":34,"is_primary":true,"text":[{"text":"use rusqlite::{params, Connection, NO_PARAMS};","highlight_start":24,"highlight_end":34}],"label":"`Connection` reimported here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"analysis/src/data/sqlite.rs","byte_start":4,"byte_end":24,"line_start":1,"line_end":1,"column_start":5,"column_end":25,"is_primary":false,"text":[{"text":"use rusqlite::Connection;","highlight_start":5,"highlight_end":25}],"label":"previous import of the type `Connection` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Connection` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove unnecessary import","code":null,"level":"help","spans":[{"file_name":"analysis/src/data/sqlite.rs","byte_start":87,"byte_end":99,"line_start":3,"line_end":3,"column_start":24,"column_end":36,"is_primary":true,"text":[{"text":"use rusqlite::{params, Connection, NO_PARAMS};","highlight_start":24,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0252]\u001b[0m\u001b[0m\u001b[1m: the name `Connection` is defined multiple times\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/sqlite.rs:3:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rusqlite::Connection;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mprevious import of the type `Connection` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::data::loader::TraceData;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rusqlite::{params, Connection, NO_PARAMS};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Connection` reimported here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove unnecessary import\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Connection` must be defined only once in the type namespace of this module\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `rusqlite::NO_PARAMS`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"analysis/src/data/sqlite.rs","byte_start":99,"byte_end":108,"line_start":3,"line_end":3,"column_start":36,"column_end":45,"is_primary":true,"text":[{"text":"use rusqlite::{params, Connection, NO_PARAMS};","highlight_start":36,"highlight_end":45}],"label":"no `NO_PARAMS` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `rusqlite::NO_PARAMS`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/sqlite.rs:3:36\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rusqlite::{params, Connection, NO_PARAMS};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `NO_PARAMS` in the root\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function import `make_xy_column_names` is private","code":{"code":"E0603","explanation":"A private item was used outside its scope.\n\nErroneous code example:\n\n```compile_fail,E0603\nmod foo {\n    const PRIVATE: u32 = 0x_a_bad_1dea_u32; // This const is private, so we\n                                            // can't use it outside of the\n                                            // `foo` module.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // error: constant `PRIVATE`\n                                                  //        is private\n```\n\nIn order to fix this error, you need to make the item public by using the `pub`\nkeyword. Example:\n\n```\nmod foo {\n    pub const PRIVATE: u32 = 0x_a_bad_1dea_u32; // We set it public by using the\n                                                // `pub` keyword.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // ok!\n```\n"},"level":"error","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":3061,"byte_end":3081,"line_start":78,"line_end":78,"column_start":30,"column_end":50,"is_primary":true,"text":[{"text":"    use crate::data::loader::make_xy_column_names;","highlight_start":30,"highlight_end":50}],"label":"private function import","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the function import `make_xy_column_names` is defined here...","code":null,"level":"note","spans":[{"file_name":"analysis/src/data/loader.rs","byte_start":127,"byte_end":147,"line_start":4,"line_end":4,"column_start":26,"column_end":46,"is_primary":true,"text":[{"text":"use crate::data::utils::{make_xy_column_names, build_combinations}; ","highlight_start":26,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...and refers to the function `make_xy_column_names` which is defined here","code":null,"level":"note","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":212,"byte_end":1490,"line_start":10,"line_end":41,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn make_xy_column_names(","highlight_start":1,"highlight_end":29},{"text":"    method: &str,","highlight_start":1,"highlight_end":18},{"text":"    drop_level: f64,","highlight_start":1,"highlight_end":21},{"text":"    metric: &str,","highlight_start":1,"highlight_end":18},{"text":"    agg: &str,","highlight_start":1,"highlight_end":15},{"text":"    met_agg: &str,","highlight_start":1,"highlight_end":19},{"text":"    pref: &str,","highlight_start":1,"highlight_end":16},{"text":") -> (String, String) {","highlight_start":1,"highlight_end":24},{"text":"    match method {","highlight_start":1,"highlight_end":19},{"text":"        \"MCd\" => (","highlight_start":1,"highlight_end":19},{"text":"            format!(\"tumor_paired{}MCd_{:.1}_seg{}_{}_{}\", metric, drop_level, agg, met_agg, pref),","highlight_start":1,"highlight_end":100},{"text":"            format!(\"tumor_{}_{:.1}_seg{}_UQ_meanMC_{}\", metric, drop_level, agg, pref),","highlight_start":1,"highlight_end":89},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        \"ckp-DE\" => (","highlight_start":1,"highlight_end":22},{"text":"            format!(\"tumor_paired{}DE_{:.1}_seg{}_{}_{}\", metric, drop_level, agg, met_agg, pref),","highlight_start":1,"highlight_end":99},{"text":"            format!(\"tumor_{}_{:.1}_seg{}_UQ_meanDE_{}\", metric, drop_level, agg, pref),","highlight_start":1,"highlight_end":89},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        \"DE\" => (","highlight_start":1,"highlight_end":18},{"text":"            format!(\"tumor_paired{}DE_DE{}_{}_{}\", metric, agg, met_agg, pref),","highlight_start":1,"highlight_end":80},{"text":"            format!(\"tumor_{}_DE{}_UQ_meanDE_{}\", metric, agg, pref),","highlight_start":1,"highlight_end":70},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        \"TTA\" => (","highlight_start":1,"highlight_end":19},{"text":"            format!(\"tumor_paired{}MCd_{:.1}_flip_seg{}_{}_{}\", metric, drop_level, agg, met_agg, pref),","highlight_start":1,"highlight_end":105},{"text":"            format!(\"tumor_{}_{:.1}_flip_seg{}_UQ_meanMC_{}\", metric, drop_level, agg, pref),","highlight_start":1,"highlight_end":94},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        \"OOD\" => (","highlight_start":1,"highlight_end":19},{"text":"            format!(\"tumor_{}_diff_2_{:.1}_30\", metric, drop_level),","highlight_start":1,"highlight_end":69},{"text":"            format!(\"tumor_{}_{:.1}_30\", metric, drop_level),","highlight_start":1,"highlight_end":62},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        _ => panic!(\"Unknown method '{}'\", method),","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"you could import this directly","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"import `make_xy_column_names` directly","code":null,"level":"help","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":3040,"byte_end":3081,"line_start":78,"line_end":78,"column_start":9,"column_end":50,"is_primary":true,"text":[{"text":"    use crate::data::loader::make_xy_column_names;","highlight_start":9,"highlight_end":50}],"label":null,"suggested_replacement":"data::utils::make_xy_column_names","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0603]\u001b[0m\u001b[0m\u001b[1m: function import `make_xy_column_names` is private\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:78:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::data::loader::make_xy_column_names;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mprivate function import\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the function import `make_xy_column_names` is defined here...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/loader.rs:4:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::data::utils::{make_xy_column_names, build_combinations}; \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...and refers to the function `make_xy_column_names` which is defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn make_xy_column_names(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    method: &str,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    drop_level: f64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    metric: &str,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10myou could import this directly\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: import `make_xy_column_names` directly\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    use \u001b[0m\u001b[0m\u001b[38;5;10mdata::utils::make_xy_column_names\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `build_combinations`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"analysis/src/data/loader.rs","byte_start":149,"byte_end":167,"line_start":4,"line_end":4,"column_start":48,"column_end":66,"is_primary":true,"text":[{"text":"use crate::data::utils::{make_xy_column_names, build_combinations}; ","highlight_start":48,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"analysis/src/data/loader.rs","byte_start":147,"byte_end":167,"line_start":4,"line_end":4,"column_start":46,"column_end":66,"is_primary":true,"text":[{"text":"use crate::data::utils::{make_xy_column_names, build_combinations}; ","highlight_start":46,"highlight_end":66}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `build_combinations`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/loader.rs:4:48\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::data::utils::{make_xy_column_names, build_combinations}; \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `HashMap`, `HashSet`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":23,"byte_end":30,"line_start":1,"line_end":1,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"use std::collections::{HashMap, HashSet};","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"analysis/src/data/utils.rs","byte_start":32,"byte_end":39,"line_start":1,"line_end":1,"column_start":33,"column_end":40,"is_primary":true,"text":[{"text":"use std::collections::{HashMap, HashSet};","highlight_start":33,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":0,"byte_end":43,"line_start":1,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::collections::{HashMap, HashSet};","highlight_start":1,"highlight_end":42},{"text":"use std::fs::File;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `HashMap`, `HashSet`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:1:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::collections::{HashMap, HashSet};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::fs::File`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":47,"byte_end":60,"line_start":2,"line_end":2,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"use std::fs::File;","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":43,"byte_end":63,"line_start":2,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::fs::File;","highlight_start":1,"highlight_end":19},{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::fs::File`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs::File;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Deserialize`, `Serialize`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":75,"byte_end":84,"line_start":3,"line_end":3,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"analysis/src/data/utils.rs","byte_start":86,"byte_end":97,"line_start":3,"line_end":3,"column_start":24,"column_end":35,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":24,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":63,"byte_end":101,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":37},{"text":"use itertools::iproduct;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Deserialize`, `Serialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:3:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::{Serialize, Deserialize};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Connection`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"analysis/src/data/sqlite.rs","byte_start":87,"byte_end":97,"line_start":3,"line_end":3,"column_start":24,"column_end":34,"is_primary":true,"text":[{"text":"use rusqlite::{params, Connection, NO_PARAMS};","highlight_start":24,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"analysis/src/data/sqlite.rs","byte_start":85,"byte_end":97,"line_start":3,"line_end":3,"column_start":22,"column_end":34,"is_primary":true,"text":[{"text":"use rusqlite::{params, Connection, NO_PARAMS};","highlight_start":22,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Connection`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/sqlite.rs:3:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rusqlite::{params, Connection, NO_PARAMS};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":2505,"byte_end":2511,"line_start":62,"line_end":62,"column_start":67,"column_end":73,"is_primary":true,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":67,"highlight_end":73}],"label":"the trait `Copy` is not implemented for `std::string::String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required by a bound in `std::iter::Iterator::copied`","code":null,"level":"note","spans":[{"file_name":"/scratch/eb_install/Rust/1.78.0/GCCcore-13.3.0/rustc-1.78.0-src/library/core/src/iter/traits/iterator.rs","byte_start":114262,"byte_end":114377,"line_start":3416,"line_end":3419,"column_start":5,"column_end":17,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `std::iter::Iterator::copied`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/scratch/eb_install/Rust/1.78.0/GCCcore-13.3.0/rustc-1.78.0-src/library/core/src/iter/traits/iterator.rs:3416:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":2490,"byte_end":2513,"line_start":62,"line_end":62,"column_start":52,"column_end":75,"is_primary":true,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":52,"highlight_end":75}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7615,"byte_end":7658,"line_start":274,"line_end":274,"column_start":9,"column_end":52,"is_primary":false,"text":[{"text":"        $crate::__std_iter::IntoIterator::into_iter($I)","highlight_start":9,"highlight_end":52}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7766,"byte_end":7787,"line_start":277,"line_end":277,"column_start":69,"column_end":90,"is_primary":false,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":69,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7873,"byte_end":7898,"line_start":280,"line_end":280,"column_start":36,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":36,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7706,"byte_end":7788,"line_start":277,"line_end":277,"column_start":9,"column_end":91,"is_primary":true,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":9,"highlight_end":91}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7873,"byte_end":7898,"line_start":280,"line_end":280,"column_start":36,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":36,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7706,"byte_end":7788,"line_start":277,"line_end":277,"column_start":9,"column_end":91,"is_primary":true,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":9,"highlight_end":91}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: Iterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7544,"byte_end":7569,"line_start":271,"line_end":271,"column_start":56,"column_end":81,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":56,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":2535,"byte_end":2541,"line_start":62,"line_end":62,"column_start":97,"column_end":103,"is_primary":true,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":97,"highlight_end":103}],"label":"the trait `Copy` is not implemented for `std::string::String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required by a bound in `std::iter::Iterator::copied`","code":null,"level":"note","spans":[{"file_name":"/scratch/eb_install/Rust/1.78.0/GCCcore-13.3.0/rustc-1.78.0-src/library/core/src/iter/traits/iterator.rs","byte_start":114262,"byte_end":114377,"line_start":3416,"line_end":3419,"column_start":5,"column_end":17,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:97\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m, aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `std::iter::Iterator::copied`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/scratch/eb_install/Rust/1.78.0/GCCcore-13.3.0/rustc-1.78.0-src/library/core/src/iter/traits/iterator.rs:3416:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":2515,"byte_end":2543,"line_start":62,"line_end":62,"column_start":77,"column_end":105,"is_primary":true,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":77,"highlight_end":105}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7615,"byte_end":7658,"line_start":274,"line_end":274,"column_start":9,"column_end":52,"is_primary":false,"text":[{"text":"        $crate::__std_iter::IntoIterator::into_iter($I)","highlight_start":9,"highlight_end":52}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7766,"byte_end":7787,"line_start":277,"line_end":277,"column_start":69,"column_end":90,"is_primary":false,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":69,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7544,"byte_end":7569,"line_start":271,"line_end":271,"column_start":56,"column_end":81,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":56,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:77\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7544,"byte_end":7569,"line_start":271,"line_end":271,"column_start":56,"column_end":81,"is_primary":true,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":56,"highlight_end":81}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: Iterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7524,"byte_end":7543,"line_start":271,"line_end":271,"column_start":36,"column_end":55,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":36,"highlight_end":55}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `cons_tuples`","code":null,"level":"note","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":1802,"byte_end":1813,"line_start":60,"line_end":60,"column_start":8,"column_end":19,"is_primary":false,"text":[{"text":"pub fn cons_tuples<I, J>(iterable: I) -> ConsTuples<I::IntoIter, J>","highlight_start":8,"highlight_end":19}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":1889,"byte_end":1895,"line_start":61,"line_end":61,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"    where I: IntoIterator<Item=J>","highlight_start":27,"highlight_end":33}],"label":"required by this bound in `cons_tuples`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `cons_tuples`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs:61:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn cons_tuples<I, J>(iterable: I) -> ConsTuples<I::IntoIter, J>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where I: IntoIterator<Item=J>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `cons_tuples`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7615,"byte_end":7658,"line_start":274,"line_end":274,"column_start":9,"column_end":52,"is_primary":true,"text":[{"text":"        $crate::__std_iter::IntoIterator::into_iter($I)","highlight_start":9,"highlight_end":52}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: Iterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7743,"byte_end":7764,"line_start":277,"line_end":277,"column_start":46,"column_end":67,"is_primary":false,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":46,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7544,"byte_end":7569,"line_start":271,"line_end":271,"column_start":56,"column_end":81,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":56,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7497,"byte_end":7580,"line_start":271,"line_end":271,"column_start":9,"column_end":92,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":9,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ConsTuples`","code":null,"level":"note","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":1530,"byte_end":1540,"line_start":46,"line_end":46,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct ConsTuples<I, J>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":1569,"byte_end":1575,"line_start":47,"line_end":47,"column_start":23,"column_end":29,"is_primary":true,"text":[{"text":"    where I: Iterator<Item=J>,","highlight_start":23,"highlight_end":29}],"label":"required by this bound in `ConsTuples`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ConsTuples`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs:47:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ConsTuples<I, J>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where I: Iterator<Item=J>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ConsTuples`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7615,"byte_end":7662,"line_start":274,"line_end":274,"column_start":9,"column_end":56,"is_primary":true,"text":[{"text":"        $crate::__std_iter::IntoIterator::into_iter($I)","highlight_start":9,"highlight_end":56}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>: Iterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7743,"byte_end":7764,"line_start":277,"line_end":277,"column_start":46,"column_end":67,"is_primary":false,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":46,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7544,"byte_end":7569,"line_start":271,"line_end":271,"column_start":56,"column_end":81,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":56,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7497,"byte_end":7580,"line_start":271,"line_end":271,"column_start":9,"column_end":92,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":9,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Product<Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>, Copied<Iter<'_, String>>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `ConsTuples`","code":null,"level":"note","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":1530,"byte_end":1540,"line_start":46,"line_end":46,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct ConsTuples<I, J>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":1560,"byte_end":1576,"line_start":47,"line_end":47,"column_start":14,"column_end":30,"is_primary":true,"text":[{"text":"    where I: Iterator<Item=J>,","highlight_start":14,"highlight_end":30}],"label":"required by this bound in `ConsTuples`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-10773394162962913878.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>: Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Product<Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>, Copied<Iter<'_, String>>>` to implement `Iterator`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ConsTuples`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs:47:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ConsTuples<I, J>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where I: Iterator<Item=J>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ConsTuples`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-10773394162962913878.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7706,"byte_end":7788,"line_start":277,"line_end":277,"column_start":9,"column_end":91,"is_primary":true,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":9,"highlight_end":91}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>: Iterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7544,"byte_end":7569,"line_start":271,"line_end":271,"column_start":56,"column_end":81,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":56,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7497,"byte_end":7580,"line_start":271,"line_end":271,"column_start":9,"column_end":92,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":9,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `ConsTuples<Product<Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>, ...>, ...>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-14459539319516221803.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>: Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ConsTuples<Product<Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>, ...>, ...>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-14459539319516221803.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":2564,"byte_end":2570,"line_start":62,"line_end":62,"column_start":126,"column_end":132,"is_primary":true,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":126,"highlight_end":132}],"label":"the trait `Copy` is not implemented for `std::string::String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required by a bound in `std::iter::Iterator::copied`","code":null,"level":"note","spans":[{"file_name":"/scratch/eb_install/Rust/1.78.0/GCCcore-13.3.0/rustc-1.78.0-src/library/core/src/iter/traits/iterator.rs","byte_start":114262,"byte_end":114377,"line_start":3416,"line_end":3419,"column_start":5,"column_end":17,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:126\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `std::iter::Iterator::copied`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/scratch/eb_install/Rust/1.78.0/GCCcore-13.3.0/rustc-1.78.0-src/library/core/src/iter/traits/iterator.rs:3416:5\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":2545,"byte_end":2572,"line_start":62,"line_end":62,"column_start":107,"column_end":134,"is_primary":true,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":107,"highlight_end":134}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7615,"byte_end":7658,"line_start":274,"line_end":274,"column_start":9,"column_end":52,"is_primary":false,"text":[{"text":"        $crate::__std_iter::IntoIterator::into_iter($I)","highlight_start":9,"highlight_end":52}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7766,"byte_end":7787,"line_start":277,"line_end":277,"column_start":69,"column_end":90,"is_primary":false,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":69,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7544,"byte_end":7569,"line_start":271,"line_end":271,"column_start":56,"column_end":81,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":56,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7497,"byte_end":7580,"line_start":271,"line_end":271,"column_start":9,"column_end":92,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":9,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:107\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7544,"byte_end":7569,"line_start":271,"line_end":271,"column_start":56,"column_end":81,"is_primary":true,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":56,"highlight_end":81}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: Iterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7497,"byte_end":7580,"line_start":271,"line_end":271,"column_start":9,"column_end":92,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":9,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7524,"byte_end":7543,"line_start":271,"line_end":271,"column_start":36,"column_end":55,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":36,"highlight_end":55}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7497,"byte_end":7580,"line_start":271,"line_end":271,"column_start":9,"column_end":92,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":9,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `cons_tuples`","code":null,"level":"note","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":1802,"byte_end":1813,"line_start":60,"line_end":60,"column_start":8,"column_end":19,"is_primary":false,"text":[{"text":"pub fn cons_tuples<I, J>(iterable: I) -> ConsTuples<I::IntoIter, J>","highlight_start":8,"highlight_end":19}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":1889,"byte_end":1895,"line_start":61,"line_end":61,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"    where I: IntoIterator<Item=J>","highlight_start":27,"highlight_end":33}],"label":"required by this bound in `cons_tuples`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `cons_tuples`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs:61:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn cons_tuples<I, J>(iterable: I) -> ConsTuples<I::IntoIter, J>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where I: IntoIterator<Item=J>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `cons_tuples`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `map` exists for struct `ConsTuples<Product<ConsTuples<Product<Product<Copied<...>, ...>, ...>, ...>, ...>, ...>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2592,"line_start":62,"line_end":63,"column_start":13,"column_end":18,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135},{"text":"                .map(move |(dl, metric, agg, met_agg)| (dataset.to_string(), method.to_string(), dl, metric.to_string(), agg.to_string(), met_agg.to_string()))","highlight_start":1,"highlight_end":18}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"analysis/src/data/utils.rs","byte_start":2592,"byte_end":2595,"line_start":63,"line_end":63,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"                .map(move |(dl, metric, agg, met_agg)| (dataset.to_string(), method.to_string(), dl, metric.to_string(), agg.to_string(), met_agg.to_string()))","highlight_start":18,"highlight_end":21}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":1519,"byte_end":1546,"line_start":46,"line_end":46,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"pub struct ConsTuples<I, J>","highlight_start":1,"highlight_end":28}],"label":"doesn't satisfy `_: Iterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/adaptors/mod.rs","byte_start":7670,"byte_end":7694,"line_start":284,"line_end":284,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"pub struct Product<I, J>","highlight_start":1,"highlight_end":25}],"label":"doesn't satisfy `<_ as Iterator>::Item = ((f64, String, String), String)` or `_: Iterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the full type name has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-15429425181236164561.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following trait bounds were not satisfied:\n`<itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>> as Iterator>::Item = ((f64, std::string::String, std::string::String), std::string::String)`\nwhich is required by `ConsTuples<itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String, std::string::String), std::string::String)>: Iterator`\n`itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>: Iterator`\nwhich is required by `ConsTuples<itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String, std::string::String), std::string::String)>: Iterator`\n`ConsTuples<itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String, std::string::String), std::string::String)>: Iterator`\nwhich is required by `&mut ConsTuples<itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String, std::string::String), std::string::String)>: Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `map` exists for struct `ConsTuples<Product<ConsTuples<Product<Product<Copied<...>, ...>, ...>, ...>, ...>, ...>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:63:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       .map(move |(dl, metric, agg, met_agg)| (dataset.to_string(), method.to_string(), dl, metric.to_string()\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/cons_tuples_impl.rs:46:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct ConsTuples<I, J>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: Iterator`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/adaptors/mod.rs:284:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub struct Product<I, J>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as Iterator>::Item = ((f64, String, String), String)` or `_: Iterator`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-15429425181236164561.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `<itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>> as Iterator>::Item = ((f64, std::string::String, std::string::String), std::string::String)`\u001b[0m\n\u001b[0m            which is required by `ConsTuples<itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String, std::string::String), std::string::String)>: Iterator`\u001b[0m\n\u001b[0m            `itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>: Iterator`\u001b[0m\n\u001b[0m            which is required by `ConsTuples<itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String, std::string::String), std::string::String)>: Iterator`\u001b[0m\n\u001b[0m            `ConsTuples<itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String, std::string::String), std::string::String)>: Iterator`\u001b[0m\n\u001b[0m            which is required by `&mut ConsTuples<itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String, std::string::String), std::string::String)>: Iterator`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7615,"byte_end":7662,"line_start":274,"line_end":274,"column_start":9,"column_end":56,"is_primary":true,"text":[{"text":"        $crate::__std_iter::IntoIterator::into_iter($I)","highlight_start":9,"highlight_end":56}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7766,"byte_end":7787,"line_start":277,"line_end":277,"column_start":69,"column_end":90,"is_primary":false,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":69,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7873,"byte_end":7898,"line_start":280,"line_end":280,"column_start":36,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":36,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7615,"byte_end":7662,"line_start":274,"line_end":274,"column_start":9,"column_end":56,"is_primary":true,"text":[{"text":"        $crate::__std_iter::IntoIterator::into_iter($I)","highlight_start":9,"highlight_end":56}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7766,"byte_end":7787,"line_start":277,"line_end":277,"column_start":69,"column_end":90,"is_primary":false,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":69,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7544,"byte_end":7569,"line_start":271,"line_end":271,"column_start":56,"column_end":81,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":56,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7615,"byte_end":7662,"line_start":274,"line_end":274,"column_start":9,"column_end":56,"is_primary":true,"text":[{"text":"        $crate::__std_iter::IntoIterator::into_iter($I)","highlight_start":9,"highlight_end":56}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7766,"byte_end":7787,"line_start":277,"line_end":277,"column_start":69,"column_end":90,"is_primary":false,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":69,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7544,"byte_end":7569,"line_start":271,"line_end":271,"column_start":56,"column_end":81,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":56,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7497,"byte_end":7580,"line_start":271,"line_end":271,"column_start":9,"column_end":92,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":9,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `std::iter::Copied<std::slice::Iter<'_, std::string::String>>: IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7524,"byte_end":7570,"line_start":271,"line_end":271,"column_start":36,"column_end":82,"is_primary":true,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":36,"highlight_end":82}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>: IntoIterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7497,"byte_end":7580,"line_start":271,"line_end":271,"column_start":9,"column_end":92,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":9,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Product<ConsTuples<Product<Product<Copied<Iter<'_, f64>>, Copied<...>>, ...>, ...>, ...>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Product<ConsTuples<Product<Product<Copied<Iter<'_, f64>>, Copied<...>>, ...>, ...>, ...>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-6653957518577990366.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-6653957518577990366.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `itertools::Product<ConsTuples<itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, ((f64, std::string::String), std::string::String)>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>: IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Product<ConsTuples<Product<Product<Copied<Iter<'_, f64>>, Copied<...>>, ...>, ...>, ...>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Product<ConsTuples<Product<Product<Copied<Iter<'_, f64>>, Copied<...>>, ...>, ...>, ...>` to implement `IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-6653957518577990366.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-6653957518577990366.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7524,"byte_end":7570,"line_start":271,"line_end":271,"column_start":36,"column_end":82,"is_primary":true,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":36,"highlight_end":82}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>: IntoIterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Product<Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>, Copied<Iter<'_, String>>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Product<Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>, Copied<Iter<'_, String>>>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-6659898048337786989.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-6659898048337786989.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `itertools::Product<itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>: IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Product<Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>, Copied<Iter<'_, String>>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Product<Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>, Copied<Iter<'_, String>>>` to implement `IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-6659898048337786989.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-6659898048337786989.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::string::String: Copy` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7615,"byte_end":7662,"line_start":274,"line_end":274,"column_start":9,"column_end":56,"is_primary":true,"text":[{"text":"        $crate::__std_iter::IntoIterator::into_iter($I)","highlight_start":9,"highlight_end":56}],"label":"the trait `Copy` is not implemented for `std::string::String`, which is required by `itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>: IntoIterator`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7743,"byte_end":7764,"line_start":277,"line_end":277,"column_start":46,"column_end":67,"is_primary":false,"text":[{"text":"        $crate::Itertools::cartesian_product($crate::iproduct!($I), $crate::iproduct!($J))","highlight_start":46,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7544,"byte_end":7569,"line_start":271,"line_end":271,"column_start":56,"column_end":81,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::cons_tuples($crate::iproduct!($I, $J)), $($K,)*)","highlight_start":56,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7846,"byte_end":7908,"line_start":280,"line_end":280,"column_start":9,"column_end":71,"is_primary":false,"text":[{"text":"        $crate::iproduct!(@flatten $crate::iproduct!($I, $J), $($K,)+)","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"analysis/src/data/utils.rs","byte_start":2451,"byte_end":2573,"line_start":62,"line_end":62,"column_start":13,"column_end":135,"is_primary":false,"text":[{"text":"            iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())","highlight_start":13,"highlight_end":135}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::iproduct!","def_site_span":{"file_name":"/home/ucl/irec/darimez/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs","byte_start":7367,"byte_end":7388,"line_start":266,"line_end":266,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! iproduct {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>` to implement `Iterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>` to implement `IntoIterator`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-16438589408499135933.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-16438589408499135933.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `std::string::String: Copy` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/utils.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   iproduct!(drop_levels.iter().copied(), metrics.iter().copied(), aggregations.iter().copied(), metric_aggs.iter().copied())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Copy` is not implemented for `std::string::String`, which is required by `itertools::Product<std::iter::Copied<std::slice::Iter<'_, f64>>, std::iter::Copied<std::slice::Iter<'_, std::string::String>>>: IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `std::iter::Copied<std::slice::Iter<'_, std::string::String>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>` to implement `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Product<Copied<Iter<'_, f64>>, Copied<Iter<'_, String>>>` to implement `IntoIterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-16438589408499135933.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/auto/home/users/d/a/darimez/MIRO/UNET/data_analysis/plot_uq/target/debug/deps/analysis-74094d2a85f5bfe9.long-type-16438589408499135933.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::iproduct` which comes from the expansion of the macro `iproduct` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `bincode`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/sqlite.rs","byte_start":716,"byte_end":723,"line_start":17,"line_end":17,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"            xs: bincode::deserialize(&row.get::<_, Vec<u8>>(7)?).unwrap(),","highlight_start":17,"highlight_end":24}],"label":"use of undeclared crate or module `bincode`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `bincode`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/sqlite.rs:17:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            xs: bincode::deserialize(&row.get::<_, Vec<u8>>(7)?).unwrap(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `bincode`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `bincode`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/sqlite.rs","byte_start":792,"byte_end":799,"line_start":18,"line_end":18,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"            th: bincode::deserialize(&row.get::<_, Vec<u8>>(8)?).unwrap(),","highlight_start":17,"highlight_end":24}],"label":"use of undeclared crate or module `bincode`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `bincode`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/sqlite.rs:18:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            th: bincode::deserialize(&row.get::<_, Vec<u8>>(8)?).unwrap(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `bincode`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `bincode`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/sqlite.rs","byte_start":868,"byte_end":875,"line_start":19,"line_end":19,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"            ys: bincode::deserialize(&row.get::<_, Vec<u8>>(9)?).unwrap(),","highlight_start":17,"highlight_end":24}],"label":"use of undeclared crate or module `bincode`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `bincode`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/sqlite.rs:19:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ys: bincode::deserialize(&row.get::<_, Vec<u8>>(9)?).unwrap(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `bincode`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `bincode`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/sqlite.rs","byte_start":1904,"byte_end":1911,"line_start":52,"line_end":52,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"            bincode::serialize(&t.xs).unwrap(),","highlight_start":13,"highlight_end":20}],"label":"use of undeclared crate or module `bincode`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `bincode`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/sqlite.rs:52:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            bincode::serialize(&t.xs).unwrap(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `bincode`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `bincode`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/sqlite.rs","byte_start":1953,"byte_end":1960,"line_start":53,"line_end":53,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"            bincode::serialize(&t.th).unwrap(),","highlight_start":13,"highlight_end":20}],"label":"use of undeclared crate or module `bincode`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `bincode`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/sqlite.rs:53:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            bincode::serialize(&t.th).unwrap(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `bincode`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `bincode`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"analysis/src/data/sqlite.rs","byte_start":2002,"byte_end":2009,"line_start":54,"line_end":54,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"            bincode::serialize(&t.ys).unwrap(),","highlight_start":13,"highlight_end":20}],"label":"use of undeclared crate or module `bincode`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `bincode`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0manalysis/src/data/sqlite.rs:54:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            bincode::serialize(&t.ys).unwrap(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `bincode`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 29 previous errors; 5 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 29 previous errors; 5 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0252, E0277, E0432, E0433, E0599, E0603.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0252, E0277, E0432, E0433, E0599, E0603.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0252`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0252`.\u001b[0m\n"}
